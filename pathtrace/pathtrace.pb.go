// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pathtrace.proto

/*
Package __pathtrace is a generated protocol buffer package.

It is generated from these files:
	pathtrace.proto

It has these top-level messages:
	Probe
	PathTraceJob
	GetPathTraceJob
	PathTraceReply
*/
package __pathtrace

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// RC defines return codes a client might receive
type RC int32

const (
	RC_NIL RC = 0
	// OK - PT Request has been completed successfully
	RC_OK RC = 1
	// EDUPID - a duplicate PathTrace Session ID was discovered
	RC_EDUPID RC = 2
	// EINVAL - a failure was encountered while validating session parameters
	RC_EINVAL RC = 3
	// ETX - a failure was encountered while sending Probe packets
	RC_ETX RC = 4
)

var RC_name = map[int32]string{
	0: "NIL",
	1: "OK",
	2: "EDUPID",
	3: "EINVAL",
	4: "ETX",
}
var RC_value = map[string]int32{
	"NIL":    0,
	"OK":     1,
	"EDUPID": 2,
	"EINVAL": 3,
	"ETX":    4,
}

func (x RC) String() string {
	return proto.EnumName(RC_name, int32(x))
}
func (RC) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Probe struct {
	// Path Tracing Session ID
	PtSessionId int32 `protobuf:"varint,1,opt,name=pt_session_id,json=ptSessionId" json:"pt_session_id,omitempty"`
	// Probe session source address, default is router's loopback address
	SrcAddr []byte `protobuf:"bytes,2,opt,name=src_addr,json=srcAddr,proto3" json:"src_addr,omitempty"`
	// Probe session destination address, a uSID container with up to 4
	// intermediate uSIDâ€™s and uN + uB bound at the egress PE to the push
	// collector SID and forward.
	DstAddr []byte `protobuf:"bytes,3,opt,name=dst_addr,json=dstAddr,proto3" json:"dst_addr,omitempty"`
	// DSCP value
	TrafficClass int32 `protobuf:"varint,4,opt,name=traffic_class,json=trafficClass" json:"traffic_class,omitempty"`
	// Flow Label sweeping range, flow_label_start <= flow_label_end
	FlowLabelStart int32 `protobuf:"varint,5,opt,name=flow_label_start,json=flowLabelStart" json:"flow_label_start,omitempty"`
	FlowLabelEnd   int32 `protobuf:"varint,6,opt,name=flow_label_end,json=flowLabelEnd" json:"flow_label_end,omitempty"`
	// Number of packets generate per each flow label
	PacketsPerFlow int32 `protobuf:"varint,7,opt,name=packets_per_flow,json=packetsPerFlow" json:"packets_per_flow,omitempty"`
	// # of probe packets per second for a given destination
	ProbeRate int32 `protobuf:"varint,8,opt,name=probe_rate,json=probeRate" json:"probe_rate,omitempty"`
	// HopByHop extension header's  type
	// TODO (sbezverk) Add enumeration when HBH types are finalized
	HbhType int32 `protobuf:"varint,9,opt,name=hbh_type,json=hbhType" json:"hbh_type,omitempty"`
	// HopByHop extension header's Action value
	HbhAction int32 `protobuf:"varint,10,opt,name=hbh_action,json=hbhAction" json:"hbh_action,omitempty"`
	// HopByHop extension header's payload size, which is a number of interfaces
	// ids to allocate
	HbhPayloadSize int32 `protobuf:"varint,11,opt,name=hbh_payload_size,json=hbhPayloadSize" json:"hbh_payload_size,omitempty"`
	// SRH TLV type
	SrhTlvType int32 `protobuf:"varint,12,opt,name=srh_tlv_type,json=srhTlvType" json:"srh_tlv_type,omitempty"`
}

func (m *Probe) Reset()                    { *m = Probe{} }
func (m *Probe) String() string            { return proto.CompactTextString(m) }
func (*Probe) ProtoMessage()               {}
func (*Probe) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Probe) GetPtSessionId() int32 {
	if m != nil {
		return m.PtSessionId
	}
	return 0
}

func (m *Probe) GetSrcAddr() []byte {
	if m != nil {
		return m.SrcAddr
	}
	return nil
}

func (m *Probe) GetDstAddr() []byte {
	if m != nil {
		return m.DstAddr
	}
	return nil
}

func (m *Probe) GetTrafficClass() int32 {
	if m != nil {
		return m.TrafficClass
	}
	return 0
}

func (m *Probe) GetFlowLabelStart() int32 {
	if m != nil {
		return m.FlowLabelStart
	}
	return 0
}

func (m *Probe) GetFlowLabelEnd() int32 {
	if m != nil {
		return m.FlowLabelEnd
	}
	return 0
}

func (m *Probe) GetPacketsPerFlow() int32 {
	if m != nil {
		return m.PacketsPerFlow
	}
	return 0
}

func (m *Probe) GetProbeRate() int32 {
	if m != nil {
		return m.ProbeRate
	}
	return 0
}

func (m *Probe) GetHbhType() int32 {
	if m != nil {
		return m.HbhType
	}
	return 0
}

func (m *Probe) GetHbhAction() int32 {
	if m != nil {
		return m.HbhAction
	}
	return 0
}

func (m *Probe) GetHbhPayloadSize() int32 {
	if m != nil {
		return m.HbhPayloadSize
	}
	return 0
}

func (m *Probe) GetSrhTlvType() int32 {
	if m != nil {
		return m.SrhTlvType
	}
	return 0
}

// Single PathTraceJob can carry multiple instances of Probe sessions as a map
// with the key of pt_session_id
type PathTraceJob struct {
	Id    []byte           `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Probe map[int32]*Probe `protobuf:"bytes,2,rep,name=probe" json:"probe,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *PathTraceJob) Reset()                    { *m = PathTraceJob{} }
func (m *PathTraceJob) String() string            { return proto.CompactTextString(m) }
func (*PathTraceJob) ProtoMessage()               {}
func (*PathTraceJob) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *PathTraceJob) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *PathTraceJob) GetProbe() map[int32]*Probe {
	if m != nil {
		return m.Probe
	}
	return nil
}

// GetPathTraceJob requests a controller for a new injecting job and it carries
// a return code for the previous job, initial request carries an empty map.
type GetPathTraceJob struct {
	Id   []byte       `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Code map[int32]RC `protobuf:"bytes,2,rep,name=code" json:"code,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value,enum=pathtrace.RC"`
}

func (m *GetPathTraceJob) Reset()                    { *m = GetPathTraceJob{} }
func (m *GetPathTraceJob) String() string            { return proto.CompactTextString(m) }
func (*GetPathTraceJob) ProtoMessage()               {}
func (*GetPathTraceJob) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *GetPathTraceJob) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *GetPathTraceJob) GetCode() map[int32]RC {
	if m != nil {
		return m.Code
	}
	return nil
}

// PathTraceReply gets returned to the client by a controller as a result of
// Path Trace Job
type PathTraceReply struct {
	Code map[int32]RC `protobuf:"bytes,1,rep,name=code" json:"code,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value,enum=pathtrace.RC"`
}

func (m *PathTraceReply) Reset()                    { *m = PathTraceReply{} }
func (m *PathTraceReply) String() string            { return proto.CompactTextString(m) }
func (*PathTraceReply) ProtoMessage()               {}
func (*PathTraceReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *PathTraceReply) GetCode() map[int32]RC {
	if m != nil {
		return m.Code
	}
	return nil
}

func init() {
	proto.RegisterType((*Probe)(nil), "pathtrace.Probe")
	proto.RegisterType((*PathTraceJob)(nil), "pathtrace.PathTraceJob")
	proto.RegisterType((*GetPathTraceJob)(nil), "pathtrace.GetPathTraceJob")
	proto.RegisterType((*PathTraceReply)(nil), "pathtrace.PathTraceReply")
	proto.RegisterEnum("pathtrace.RC", RC_name, RC_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for PathTracer service

type PathTracerClient interface {
	// PathTraceJobRequest comes from a path trace agent, it is a stream of job
	// requests and job replies. Each new request carries the result of a previous
	// job.
	PathTraceJobRequest(ctx context.Context, opts ...grpc.CallOption) (PathTracer_PathTraceJobRequestClient, error)
	// PathTraceRequest is initiated by a client application
	PathTraceRequest(ctx context.Context, in *PathTraceJob, opts ...grpc.CallOption) (*PathTraceReply, error)
}

type pathTracerClient struct {
	cc *grpc.ClientConn
}

func NewPathTracerClient(cc *grpc.ClientConn) PathTracerClient {
	return &pathTracerClient{cc}
}

func (c *pathTracerClient) PathTraceJobRequest(ctx context.Context, opts ...grpc.CallOption) (PathTracer_PathTraceJobRequestClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_PathTracer_serviceDesc.Streams[0], c.cc, "/pathtrace.PathTracer/PathTraceJobRequest", opts...)
	if err != nil {
		return nil, err
	}
	x := &pathTracerPathTraceJobRequestClient{stream}
	return x, nil
}

type PathTracer_PathTraceJobRequestClient interface {
	Send(*GetPathTraceJob) error
	Recv() (*PathTraceJob, error)
	grpc.ClientStream
}

type pathTracerPathTraceJobRequestClient struct {
	grpc.ClientStream
}

func (x *pathTracerPathTraceJobRequestClient) Send(m *GetPathTraceJob) error {
	return x.ClientStream.SendMsg(m)
}

func (x *pathTracerPathTraceJobRequestClient) Recv() (*PathTraceJob, error) {
	m := new(PathTraceJob)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *pathTracerClient) PathTraceRequest(ctx context.Context, in *PathTraceJob, opts ...grpc.CallOption) (*PathTraceReply, error) {
	out := new(PathTraceReply)
	err := grpc.Invoke(ctx, "/pathtrace.PathTracer/PathTraceRequest", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for PathTracer service

type PathTracerServer interface {
	// PathTraceJobRequest comes from a path trace agent, it is a stream of job
	// requests and job replies. Each new request carries the result of a previous
	// job.
	PathTraceJobRequest(PathTracer_PathTraceJobRequestServer) error
	// PathTraceRequest is initiated by a client application
	PathTraceRequest(context.Context, *PathTraceJob) (*PathTraceReply, error)
}

func RegisterPathTracerServer(s *grpc.Server, srv PathTracerServer) {
	s.RegisterService(&_PathTracer_serviceDesc, srv)
}

func _PathTracer_PathTraceJobRequest_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PathTracerServer).PathTraceJobRequest(&pathTracerPathTraceJobRequestServer{stream})
}

type PathTracer_PathTraceJobRequestServer interface {
	Send(*PathTraceJob) error
	Recv() (*GetPathTraceJob, error)
	grpc.ServerStream
}

type pathTracerPathTraceJobRequestServer struct {
	grpc.ServerStream
}

func (x *pathTracerPathTraceJobRequestServer) Send(m *PathTraceJob) error {
	return x.ServerStream.SendMsg(m)
}

func (x *pathTracerPathTraceJobRequestServer) Recv() (*GetPathTraceJob, error) {
	m := new(GetPathTraceJob)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _PathTracer_PathTraceRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PathTraceJob)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PathTracerServer).PathTraceRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pathtrace.PathTracer/PathTraceRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PathTracerServer).PathTraceRequest(ctx, req.(*PathTraceJob))
	}
	return interceptor(ctx, in, info, handler)
}

var _PathTracer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pathtrace.PathTracer",
	HandlerType: (*PathTracerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PathTraceRequest",
			Handler:    _PathTracer_PathTraceRequest_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PathTraceJobRequest",
			Handler:       _PathTracer_PathTraceJobRequest_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "pathtrace.proto",
}

func init() { proto.RegisterFile("pathtrace.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 586 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x54, 0x5f, 0x6b, 0xdb, 0x3e,
	0x14, 0xfd, 0xc9, 0x69, 0x92, 0xe6, 0xe6, 0x4f, 0x8d, 0x7e, 0x0f, 0x73, 0x03, 0x83, 0x90, 0x96,
	0x11, 0xf6, 0x10, 0x46, 0x06, 0x5b, 0xd9, 0x9e, 0xba, 0x34, 0x1d, 0xe9, 0x4a, 0x17, 0xdc, 0x6c,
	0x8c, 0xbd, 0x08, 0xd9, 0x52, 0x91, 0xa9, 0x89, 0x3d, 0x49, 0x4d, 0x49, 0xbf, 0xc5, 0x3e, 0xc3,
	0xba, 0xef, 0x39, 0x24, 0x79, 0xae, 0x19, 0x0d, 0x7b, 0xda, 0x9b, 0x38, 0xe7, 0x9e, 0x73, 0x4f,
	0xce, 0x0d, 0x86, 0xbd, 0x9c, 0x6a, 0xa1, 0x25, 0x8d, 0xf9, 0x38, 0x97, 0x99, 0xce, 0x70, 0xab,
	0x04, 0x86, 0x3f, 0x6b, 0x50, 0x5f, 0xc8, 0x2c, 0xe2, 0x78, 0x08, 0xdd, 0x5c, 0x13, 0xc5, 0x95,
	0x4a, 0xb2, 0x15, 0x49, 0x58, 0x80, 0x06, 0x68, 0x54, 0x0f, 0xdb, 0xb9, 0xbe, 0x74, 0xd8, 0x9c,
	0xe1, 0x7d, 0xd8, 0x55, 0x32, 0x26, 0x94, 0x31, 0x19, 0x78, 0x03, 0x34, 0xea, 0x84, 0x4d, 0x25,
	0xe3, 0x63, 0xc6, 0xa4, 0xa1, 0x98, 0xd2, 0x8e, 0xaa, 0x39, 0x8a, 0x29, 0x6d, 0xa9, 0x03, 0xe8,
	0x6a, 0x49, 0xaf, 0xae, 0x92, 0x98, 0xc4, 0x29, 0x55, 0x2a, 0xd8, 0xb1, 0xce, 0x9d, 0x02, 0x9c,
	0x1a, 0x0c, 0x8f, 0xc0, 0xbf, 0x4a, 0xb3, 0x5b, 0x92, 0xd2, 0x88, 0xa7, 0x44, 0x69, 0x2a, 0x75,
	0x50, 0xb7, 0x73, 0x3d, 0x83, 0x9f, 0x1b, 0xf8, 0xd2, 0xa0, 0xf8, 0x10, 0x7a, 0x95, 0x49, 0xbe,
	0x62, 0x41, 0xc3, 0xf9, 0x95, 0x73, 0xb3, 0x15, 0x33, 0x7e, 0x39, 0x8d, 0xaf, 0xb9, 0x56, 0x24,
	0xe7, 0x92, 0x18, 0x2e, 0x68, 0x3a, 0xbf, 0x02, 0x5f, 0x70, 0x79, 0x9a, 0x66, 0xb7, 0xf8, 0x29,
	0x40, 0x6e, 0x1a, 0x20, 0x92, 0x6a, 0x1e, 0xec, 0xda, 0x99, 0x96, 0x45, 0x42, 0xaa, 0xb9, 0xf9,
	0x61, 0x22, 0x12, 0x44, 0x6f, 0x72, 0x1e, 0xb4, 0x2c, 0xd9, 0x14, 0x91, 0x58, 0x6e, 0x72, 0x6e,
	0x94, 0x86, 0xa2, 0xb1, 0x4e, 0xb2, 0x55, 0x00, 0x4e, 0x29, 0x22, 0x71, 0x6c, 0x01, 0x13, 0xc1,
	0xd0, 0x39, 0xdd, 0xa4, 0x19, 0x65, 0x44, 0x25, 0x77, 0x3c, 0x68, 0xbb, 0x08, 0x22, 0x12, 0x0b,
	0x07, 0x5f, 0x26, 0x77, 0x1c, 0x0f, 0xa0, 0xa3, 0xa4, 0x20, 0x3a, 0x5d, 0xbb, 0x3d, 0x1d, 0x3b,
	0x05, 0x4a, 0x8a, 0x65, 0xba, 0x36, 0xab, 0x86, 0xf7, 0x08, 0x3a, 0x0b, 0xaa, 0xc5, 0xd2, 0x5c,
	0xed, 0x2c, 0x8b, 0x70, 0x0f, 0xbc, 0xe2, 0x46, 0x9d, 0xd0, 0x4b, 0x18, 0x3e, 0x82, 0xba, 0xcd,
	0x1c, 0x78, 0x83, 0xda, 0xa8, 0x3d, 0x19, 0x8e, 0x1f, 0x8e, 0x5e, 0xd5, 0x8d, 0xed, 0xb1, 0x67,
	0x2b, 0x2d, 0x37, 0xa1, 0x13, 0xf4, 0xcf, 0x00, 0x1e, 0x40, 0xec, 0x43, 0xed, 0x9a, 0x6f, 0x8a,
	0xe3, 0x9b, 0x27, 0x7e, 0x06, 0xf5, 0x35, 0x4d, 0x6f, 0xb8, 0xbd, 0x78, 0x7b, 0xe2, 0x57, 0x9d,
	0x6d, 0x4b, 0x8e, 0x7e, 0xe3, 0x1d, 0xa1, 0xe1, 0x0f, 0x04, 0x7b, 0xef, 0xb9, 0xfe, 0x4b, 0xd2,
	0x9d, 0x38, 0x63, 0xbf, 0x83, 0x1e, 0x56, 0xec, 0xfe, 0x50, 0x8e, 0xa7, 0x19, 0x2b, 0xa2, 0x5a,
	0x45, 0xff, 0x14, 0x5a, 0x25, 0xf4, 0x48, 0xd0, 0x83, 0x6a, 0xd0, 0xde, 0xa4, 0x5b, 0x71, 0x0e,
	0xa7, 0xd5, 0x94, 0xdf, 0x11, 0xf4, 0xca, 0x45, 0x21, 0xcf, 0xd3, 0x0d, 0x7e, 0x5d, 0x84, 0x42,
	0x36, 0xd4, 0xc1, 0x63, 0xed, 0xd9, 0xc1, 0x7f, 0x95, 0xe9, 0xf9, 0x2b, 0xf0, 0xc2, 0x29, 0x6e,
	0x42, 0xed, 0x62, 0x7e, 0xee, 0xff, 0x87, 0x1b, 0xe0, 0x7d, 0xfc, 0xe0, 0x23, 0x0c, 0xd0, 0x98,
	0x9d, 0x7c, 0x5a, 0xcc, 0x4f, 0x7c, 0xcf, 0xbe, 0xe7, 0x17, 0x9f, 0x8f, 0xcf, 0xfd, 0x9a, 0x19,
	0x9c, 0x2d, 0xbf, 0xf8, 0x3b, 0x93, 0x7b, 0x04, 0x50, 0x46, 0x94, 0xf8, 0x02, 0xfe, 0xaf, 0x56,
	0x18, 0xf2, 0x6f, 0x37, 0x5c, 0x69, 0xdc, 0xdf, 0xde, 0x72, 0xff, 0xc9, 0x96, 0xbf, 0xca, 0x08,
	0xbd, 0x40, 0xf8, 0x14, 0xfc, 0x4a, 0x01, 0xce, 0x6c, 0x9b, 0xa0, 0xbf, 0xbf, 0xb5, 0xb6, 0x77,
	0xdd, 0xaf, 0xed, 0xf1, 0xdb, 0x92, 0x8d, 0x1a, 0xf6, 0x43, 0xf4, 0xf2, 0x57, 0x00, 0x00, 0x00,
	0xff, 0xff, 0x89, 0xd2, 0xf0, 0xec, 0x9b, 0x04, 0x00, 0x00,
}
