// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.12.4
// source: pathtrace.proto

package pathtrace

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// RC defines return codes a client might receive
type RC int32

const (
	RC_NIL RC = 0
	// OK - PT Request has been completed successfully
	RC_OK RC = 1
	// EDUPID - a duplicate PathTrace Session ID was discovered
	RC_EDUPID RC = 2
	// EINVAL - a failure was encountered while validating session parameters
	RC_EINVAL RC = 3
	// ETX - a failure was encountered while sending Probe packets
	RC_ETX RC = 4
)

// Enum value maps for RC.
var (
	RC_name = map[int32]string{
		0: "NIL",
		1: "OK",
		2: "EDUPID",
		3: "EINVAL",
		4: "ETX",
	}
	RC_value = map[string]int32{
		"NIL":    0,
		"OK":     1,
		"EDUPID": 2,
		"EINVAL": 3,
		"ETX":    4,
	}
)

func (x RC) Enum() *RC {
	p := new(RC)
	*p = x
	return p
}

func (x RC) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RC) Descriptor() protoreflect.EnumDescriptor {
	return file_pathtrace_proto_enumTypes[0].Descriptor()
}

func (RC) Type() protoreflect.EnumType {
	return &file_pathtrace_proto_enumTypes[0]
}

func (x RC) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RC.Descriptor instead.
func (RC) EnumDescriptor() ([]byte, []int) {
	return file_pathtrace_proto_rawDescGZIP(), []int{0}
}

type Probe struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Path Tracing Session ID
	SessionId int32 `protobuf:"varint,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	// Source address to use for Probe packet
	SrcAddr  []byte `protobuf:"bytes,2,opt,name=src_addr,json=srcAddr,proto3" json:"src_addr,omitempty"`
	DstAddr  []byte `protobuf:"bytes,3,opt,name=dst_addr,json=dstAddr,proto3" json:"dst_addr,omitempty"`
	HopLimit int32  `protobuf:"varint,4,opt,name=hop_limit,json=hopLimit,proto3" json:"hop_limit,omitempty"`
	// Probe's segment list carries a list of segments a probe traverses, the
	// segment list is in REVERSE order, with first segment being the destination
	// of Probe's session. dst_addr and segment_list[0] MUST be the same address
	SegmentList [][]byte `protobuf:"bytes,5,rep,name=segment_list,json=segmentList,proto3" json:"segment_list,omitempty"`
	// DSCP value
	TrafficClass int32 `protobuf:"varint,6,opt,name=traffic_class,json=trafficClass,proto3" json:"traffic_class,omitempty"`
	// Flow Label sweeping range, flow_label_start <= flow_label_end
	FlowLabelStart int32 `protobuf:"varint,7,opt,name=flow_label_start,json=flowLabelStart,proto3" json:"flow_label_start,omitempty"`
	FlowLabelEnd   int32 `protobuf:"varint,8,opt,name=flow_label_end,json=flowLabelEnd,proto3" json:"flow_label_end,omitempty"`
	// Number of packets generate per each flow label
	PacketsPerFlow int32 `protobuf:"varint,9,opt,name=packets_per_flow,json=packetsPerFlow,proto3" json:"packets_per_flow,omitempty"`
	// # of probe packets per second for a given destination
	ProbeRate int32 `protobuf:"varint,10,opt,name=probe_rate,json=probeRate,proto3" json:"probe_rate,omitempty"`
}

func (x *Probe) Reset() {
	*x = Probe{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pathtrace_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Probe) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Probe) ProtoMessage() {}

func (x *Probe) ProtoReflect() protoreflect.Message {
	mi := &file_pathtrace_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Probe.ProtoReflect.Descriptor instead.
func (*Probe) Descriptor() ([]byte, []int) {
	return file_pathtrace_proto_rawDescGZIP(), []int{0}
}

func (x *Probe) GetSessionId() int32 {
	if x != nil {
		return x.SessionId
	}
	return 0
}

func (x *Probe) GetSrcAddr() []byte {
	if x != nil {
		return x.SrcAddr
	}
	return nil
}

func (x *Probe) GetDstAddr() []byte {
	if x != nil {
		return x.DstAddr
	}
	return nil
}

func (x *Probe) GetHopLimit() int32 {
	if x != nil {
		return x.HopLimit
	}
	return 0
}

func (x *Probe) GetSegmentList() [][]byte {
	if x != nil {
		return x.SegmentList
	}
	return nil
}

func (x *Probe) GetTrafficClass() int32 {
	if x != nil {
		return x.TrafficClass
	}
	return 0
}

func (x *Probe) GetFlowLabelStart() int32 {
	if x != nil {
		return x.FlowLabelStart
	}
	return 0
}

func (x *Probe) GetFlowLabelEnd() int32 {
	if x != nil {
		return x.FlowLabelEnd
	}
	return 0
}

func (x *Probe) GetPacketsPerFlow() int32 {
	if x != nil {
		return x.PacketsPerFlow
	}
	return 0
}

func (x *Probe) GetProbeRate() int32 {
	if x != nil {
		return x.ProbeRate
	}
	return 0
}

// Single PathTraceJob can carry multiple instances of Probe sessions as a map
// with the key of pt_session_id
type PathTraceJob struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    []byte `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Probe *Probe `protobuf:"bytes,2,opt,name=probe,proto3" json:"probe,omitempty"`
}

func (x *PathTraceJob) Reset() {
	*x = PathTraceJob{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pathtrace_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PathTraceJob) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PathTraceJob) ProtoMessage() {}

func (x *PathTraceJob) ProtoReflect() protoreflect.Message {
	mi := &file_pathtrace_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PathTraceJob.ProtoReflect.Descriptor instead.
func (*PathTraceJob) Descriptor() ([]byte, []int) {
	return file_pathtrace_proto_rawDescGZIP(), []int{1}
}

func (x *PathTraceJob) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *PathTraceJob) GetProbe() *Probe {
	if x != nil {
		return x.Probe
	}
	return nil
}

// GetPathTraceJob requests a controller for a new injecting job and it carries
// a return code for the previous job, initial request carries an empty map.
type GetPathTraceJob struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   []byte `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Code RC     `protobuf:"varint,2,opt,name=code,proto3,enum=pathtrace.RC" json:"code,omitempty"`
}

func (x *GetPathTraceJob) Reset() {
	*x = GetPathTraceJob{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pathtrace_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPathTraceJob) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPathTraceJob) ProtoMessage() {}

func (x *GetPathTraceJob) ProtoReflect() protoreflect.Message {
	mi := &file_pathtrace_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPathTraceJob.ProtoReflect.Descriptor instead.
func (*GetPathTraceJob) Descriptor() ([]byte, []int) {
	return file_pathtrace_proto_rawDescGZIP(), []int{2}
}

func (x *GetPathTraceJob) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *GetPathTraceJob) GetCode() RC {
	if x != nil {
		return x.Code
	}
	return RC_NIL
}

// PathTraceReply gets returned to the client by a controller as a result of
// Path Trace Job
type PathTraceReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code RC `protobuf:"varint,1,opt,name=code,proto3,enum=pathtrace.RC" json:"code,omitempty"`
}

func (x *PathTraceReply) Reset() {
	*x = PathTraceReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pathtrace_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PathTraceReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PathTraceReply) ProtoMessage() {}

func (x *PathTraceReply) ProtoReflect() protoreflect.Message {
	mi := &file_pathtrace_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PathTraceReply.ProtoReflect.Descriptor instead.
func (*PathTraceReply) Descriptor() ([]byte, []int) {
	return file_pathtrace_proto_rawDescGZIP(), []int{3}
}

func (x *PathTraceReply) GetCode() RC {
	if x != nil {
		return x.Code
	}
	return RC_NIL
}

var File_pathtrace_proto protoreflect.FileDescriptor

var file_pathtrace_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x70, 0x61, 0x74, 0x68, 0x74, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x09, 0x70, 0x61, 0x74, 0x68, 0x74, 0x72, 0x61, 0x63, 0x65, 0x22, 0xda, 0x02, 0x0a,
	0x05, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x72, 0x63, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x73, 0x72, 0x63, 0x41, 0x64, 0x64, 0x72,
	0x12, 0x19, 0x0a, 0x08, 0x64, 0x73, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x07, 0x64, 0x73, 0x74, 0x41, 0x64, 0x64, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x68,
	0x6f, 0x70, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x68, 0x6f, 0x70, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x67, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0b,
	0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x74,
	0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x12, 0x28, 0x0a, 0x10, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x66, 0x6c, 0x6f, 0x77,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x66, 0x6c,
	0x6f, 0x77, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0c, 0x66, 0x6c, 0x6f, 0x77, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x45, 0x6e, 0x64,
	0x12, 0x28, 0x0a, 0x10, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f,
	0x66, 0x6c, 0x6f, 0x77, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x70, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x73, 0x50, 0x65, 0x72, 0x46, 0x6c, 0x6f, 0x77, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72,
	0x6f, 0x62, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x70, 0x72, 0x6f, 0x62, 0x65, 0x52, 0x61, 0x74, 0x65, 0x22, 0x46, 0x0a, 0x0c, 0x50, 0x61, 0x74,
	0x68, 0x54, 0x72, 0x61, 0x63, 0x65, 0x4a, 0x6f, 0x62, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x69, 0x64, 0x12, 0x26, 0x0a, 0x05, 0x70, 0x72, 0x6f,
	0x62, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x61, 0x74, 0x68, 0x74,
	0x72, 0x61, 0x63, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x52, 0x05, 0x70, 0x72, 0x6f, 0x62,
	0x65, 0x22, 0x44, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x50, 0x61, 0x74, 0x68, 0x54, 0x72, 0x61, 0x63,
	0x65, 0x4a, 0x6f, 0x62, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x70, 0x61, 0x74, 0x68, 0x74, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x52,
	0x43, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x33, 0x0a, 0x0e, 0x50, 0x61, 0x74, 0x68, 0x54,
	0x72, 0x61, 0x63, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x21, 0x0a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x70, 0x61, 0x74, 0x68, 0x74, 0x72,
	0x61, 0x63, 0x65, 0x2e, 0x52, 0x43, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x2a, 0x36, 0x0a, 0x02,
	0x52, 0x43, 0x12, 0x07, 0x0a, 0x03, 0x4e, 0x49, 0x4c, 0x10, 0x00, 0x12, 0x06, 0x0a, 0x02, 0x4f,
	0x4b, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x45, 0x44, 0x55, 0x50, 0x49, 0x44, 0x10, 0x02, 0x12,
	0x0a, 0x0a, 0x06, 0x45, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x10, 0x03, 0x12, 0x07, 0x0a, 0x03, 0x45,
	0x54, 0x58, 0x10, 0x04, 0x32, 0xa4, 0x01, 0x0a, 0x0a, 0x50, 0x61, 0x74, 0x68, 0x54, 0x72, 0x61,
	0x63, 0x65, 0x72, 0x12, 0x4e, 0x0a, 0x13, 0x50, 0x61, 0x74, 0x68, 0x54, 0x72, 0x61, 0x63, 0x65,
	0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x2e, 0x70, 0x61, 0x74,
	0x68, 0x74, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x61, 0x74, 0x68, 0x54, 0x72,
	0x61, 0x63, 0x65, 0x4a, 0x6f, 0x62, 0x1a, 0x17, 0x2e, 0x70, 0x61, 0x74, 0x68, 0x74, 0x72, 0x61,
	0x63, 0x65, 0x2e, 0x50, 0x61, 0x74, 0x68, 0x54, 0x72, 0x61, 0x63, 0x65, 0x4a, 0x6f, 0x62, 0x28,
	0x01, 0x30, 0x01, 0x12, 0x46, 0x0a, 0x10, 0x50, 0x61, 0x74, 0x68, 0x54, 0x72, 0x61, 0x63, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x2e, 0x70, 0x61, 0x74, 0x68, 0x74, 0x72,
	0x61, 0x63, 0x65, 0x2e, 0x50, 0x61, 0x74, 0x68, 0x54, 0x72, 0x61, 0x63, 0x65, 0x4a, 0x6f, 0x62,
	0x1a, 0x19, 0x2e, 0x70, 0x61, 0x74, 0x68, 0x74, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x50, 0x61, 0x74,
	0x68, 0x54, 0x72, 0x61, 0x63, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x42, 0x0e, 0x5a, 0x0c, 0x2e,
	0x2f, 0x3b, 0x70, 0x61, 0x74, 0x68, 0x74, 0x72, 0x61, 0x63, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_pathtrace_proto_rawDescOnce sync.Once
	file_pathtrace_proto_rawDescData = file_pathtrace_proto_rawDesc
)

func file_pathtrace_proto_rawDescGZIP() []byte {
	file_pathtrace_proto_rawDescOnce.Do(func() {
		file_pathtrace_proto_rawDescData = protoimpl.X.CompressGZIP(file_pathtrace_proto_rawDescData)
	})
	return file_pathtrace_proto_rawDescData
}

var file_pathtrace_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_pathtrace_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_pathtrace_proto_goTypes = []interface{}{
	(RC)(0),                 // 0: pathtrace.RC
	(*Probe)(nil),           // 1: pathtrace.Probe
	(*PathTraceJob)(nil),    // 2: pathtrace.PathTraceJob
	(*GetPathTraceJob)(nil), // 3: pathtrace.GetPathTraceJob
	(*PathTraceReply)(nil),  // 4: pathtrace.PathTraceReply
}
var file_pathtrace_proto_depIdxs = []int32{
	1, // 0: pathtrace.PathTraceJob.probe:type_name -> pathtrace.Probe
	0, // 1: pathtrace.GetPathTraceJob.code:type_name -> pathtrace.RC
	0, // 2: pathtrace.PathTraceReply.code:type_name -> pathtrace.RC
	3, // 3: pathtrace.PathTracer.PathTraceJobRequest:input_type -> pathtrace.GetPathTraceJob
	2, // 4: pathtrace.PathTracer.PathTraceRequest:input_type -> pathtrace.PathTraceJob
	2, // 5: pathtrace.PathTracer.PathTraceJobRequest:output_type -> pathtrace.PathTraceJob
	4, // 6: pathtrace.PathTracer.PathTraceRequest:output_type -> pathtrace.PathTraceReply
	5, // [5:7] is the sub-list for method output_type
	3, // [3:5] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_pathtrace_proto_init() }
func file_pathtrace_proto_init() {
	if File_pathtrace_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_pathtrace_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Probe); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pathtrace_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PathTraceJob); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pathtrace_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPathTraceJob); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pathtrace_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PathTraceReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pathtrace_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_pathtrace_proto_goTypes,
		DependencyIndexes: file_pathtrace_proto_depIdxs,
		EnumInfos:         file_pathtrace_proto_enumTypes,
		MessageInfos:      file_pathtrace_proto_msgTypes,
	}.Build()
	File_pathtrace_proto = out.File
	file_pathtrace_proto_rawDesc = nil
	file_pathtrace_proto_goTypes = nil
	file_pathtrace_proto_depIdxs = nil
}
