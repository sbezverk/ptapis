syntax = "proto3";

package pathtrace;
option go_package = "./;pathtrace";

message Probe {
  // Path Tracing Session ID
  int32 session_id = 1;
  // Source address to use for Probe packet
  bytes src_addr = 2;
  bytes dst_addr = 3;
  int32 hop_limit = 4;
  // Probe's segment list carries a list of segments a probe traverses, the
  // segment list is in REVERSE order, with first segment being the destination
  // of Probe's session. dst_addr and segment_list[0] MUST be the same address
  repeated bytes segment_list = 5;
  // DSCP value
  int32 traffic_class = 6;
  // Flow Label sweeping range, flow_label_start <= flow_label_end
  int32 flow_label_start = 7;
  int32 flow_label_end = 8;
  // Number of packets generate per each flow label
  int32 packets_per_flow = 9;
  // # of probe packets per second for a given destination
  int32 probe_rate = 10;
  // Specifies if probe should be constructed in No Reduced mode
  // by default a probe is constructed in Reduced mode.
  bool reduced_mode_off = 11;
  // Specifies if Probe is Path Tracing probe (default) or Path Assurance
  bool pa_mode = 12;
}

// Single PathTraceJob can carry multiple instances of Probe sessions as a map
// with the key of pt_session_id
message PathTraceJob {
  bytes id = 1;
  Probe probe = 2;
}

// RC defines return codes a client might receive
enum RC {
  NIL = 0;
  // OK - PT Request has been completed successfully
  OK = 1;
  // EDUPID - a duplicate PathTrace Session ID was discovered
  EDUPID = 2;
  // EINVAL - a failure was encountered while validating session parameters
  EINVAL = 3;
  // ETX - a failure was encountered while sending Probe packets
  ETX = 4;
}

// GetPathTraceJob requests a controller for a new injecting job and it carries
// a return code for the previous job, initial request carries an empty map.
message GetPathTraceJob {
  bytes id = 1;
  RC code = 2;
}

// PathTraceReply gets returned to the client by a controller as a result of
// Path Trace Job
message PathTraceReply { RC code = 1; }

service PathTracer {
  // PathTraceJobRequest comes from a path trace agent, it is a stream of job
  // requests and job replies. Each new request carries the result of a previous
  // job.
  rpc PathTraceJobRequest(stream GetPathTraceJob) returns (stream PathTraceJob);
  // PathTraceRequest is initiated by a client application
  rpc PathTraceRequest(PathTraceJob) returns (PathTraceReply);
}
