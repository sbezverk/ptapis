// Code generated by protoc-gen-go. DO NOT EDIT.
// source: registration.proto

/*
Package __registration is a generated protocol buffer package.

It is generated from these files:
	registration.proto

It has these top-level messages:
	Registration
	Reply
*/
package __registration

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/empty"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Mode int32

const (
	Mode_PNODE  Mode = 0
	Mode_PENODE Mode = 1
)

var Mode_name = map[int32]string{
	0: "PNODE",
	1: "PENODE",
}
var Mode_value = map[string]int32{
	"PNODE":  0,
	"PENODE": 1,
}

func (x Mode) String() string {
	return proto.EnumName(Mode_name, int32(x))
}
func (Mode) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type ReturnCode int32

const (
	ReturnCode_OK      ReturnCode = 0
	ReturnCode_ERRMODE ReturnCode = 1
)

var ReturnCode_name = map[int32]string{
	0: "OK",
	1: "ERRMODE",
}
var ReturnCode_value = map[string]int32{
	"OK":      0,
	"ERRMODE": 1,
}

func (x ReturnCode) String() string {
	return proto.EnumName(ReturnCode_name, int32(x))
}
func (ReturnCode) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type Registration struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Mode Mode   `protobuf:"varint,2,opt,name=mode,enum=registration.Mode" json:"mode,omitempty"`
}

func (m *Registration) Reset()                    { *m = Registration{} }
func (m *Registration) String() string            { return proto.CompactTextString(m) }
func (*Registration) ProtoMessage()               {}
func (*Registration) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Registration) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Registration) GetMode() Mode {
	if m != nil {
		return m.Mode
	}
	return Mode_PNODE
}

type Reply struct {
	Id          []byte     `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ReturnCode  ReturnCode `protobuf:"varint,2,opt,name=return_code,json=returnCode,enum=registration.ReturnCode" json:"return_code,omitempty"`
	ErrorDetail string     `protobuf:"bytes,3,opt,name=error_detail,json=errorDetail" json:"error_detail,omitempty"`
}

func (m *Reply) Reset()                    { *m = Reply{} }
func (m *Reply) String() string            { return proto.CompactTextString(m) }
func (*Reply) ProtoMessage()               {}
func (*Reply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Reply) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *Reply) GetReturnCode() ReturnCode {
	if m != nil {
		return m.ReturnCode
	}
	return ReturnCode_OK
}

func (m *Reply) GetErrorDetail() string {
	if m != nil {
		return m.ErrorDetail
	}
	return ""
}

func init() {
	proto.RegisterType((*Registration)(nil), "registration.Registration")
	proto.RegisterType((*Reply)(nil), "registration.Reply")
	proto.RegisterEnum("registration.Mode", Mode_name, Mode_value)
	proto.RegisterEnum("registration.ReturnCode", ReturnCode_name, ReturnCode_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Register service

type RegisterClient interface {
	RegistrationRequest(ctx context.Context, in *Registration, opts ...grpc.CallOption) (*Reply, error)
	MonitorSession(ctx context.Context, opts ...grpc.CallOption) (Register_MonitorSessionClient, error)
}

type registerClient struct {
	cc *grpc.ClientConn
}

func NewRegisterClient(cc *grpc.ClientConn) RegisterClient {
	return &registerClient{cc}
}

func (c *registerClient) RegistrationRequest(ctx context.Context, in *Registration, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := grpc.Invoke(ctx, "/registration.Register/RegistrationRequest", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registerClient) MonitorSession(ctx context.Context, opts ...grpc.CallOption) (Register_MonitorSessionClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Register_serviceDesc.Streams[0], c.cc, "/registration.Register/MonitorSession", opts...)
	if err != nil {
		return nil, err
	}
	x := &registerMonitorSessionClient{stream}
	return x, nil
}

type Register_MonitorSessionClient interface {
	Send(*google_protobuf.Empty) error
	Recv() (*google_protobuf.Empty, error)
	grpc.ClientStream
}

type registerMonitorSessionClient struct {
	grpc.ClientStream
}

func (x *registerMonitorSessionClient) Send(m *google_protobuf.Empty) error {
	return x.ClientStream.SendMsg(m)
}

func (x *registerMonitorSessionClient) Recv() (*google_protobuf.Empty, error) {
	m := new(google_protobuf.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Register service

type RegisterServer interface {
	RegistrationRequest(context.Context, *Registration) (*Reply, error)
	MonitorSession(Register_MonitorSessionServer) error
}

func RegisterRegisterServer(s *grpc.Server, srv RegisterServer) {
	s.RegisterService(&_Register_serviceDesc, srv)
}

func _Register_RegistrationRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Registration)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegisterServer).RegistrationRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/registration.Register/RegistrationRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegisterServer).RegistrationRequest(ctx, req.(*Registration))
	}
	return interceptor(ctx, in, info, handler)
}

func _Register_MonitorSession_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RegisterServer).MonitorSession(&registerMonitorSessionServer{stream})
}

type Register_MonitorSessionServer interface {
	Send(*google_protobuf.Empty) error
	Recv() (*google_protobuf.Empty, error)
	grpc.ServerStream
}

type registerMonitorSessionServer struct {
	grpc.ServerStream
}

func (x *registerMonitorSessionServer) Send(m *google_protobuf.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *registerMonitorSessionServer) Recv() (*google_protobuf.Empty, error) {
	m := new(google_protobuf.Empty)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Register_serviceDesc = grpc.ServiceDesc{
	ServiceName: "registration.Register",
	HandlerType: (*RegisterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegistrationRequest",
			Handler:    _Register_RegistrationRequest_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "MonitorSession",
			Handler:       _Register_MonitorSession_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "registration.proto",
}

func init() { proto.RegisterFile("registration.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 313 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x91, 0x41, 0x6b, 0xfa, 0x40,
	0x10, 0xc5, 0xdd, 0xfc, 0xd5, 0x7f, 0x1d, 0x43, 0x90, 0x11, 0x4a, 0xb0, 0x14, 0xd4, 0x43, 0x11,
	0x0f, 0x6b, 0xb1, 0xa7, 0xd2, 0x5b, 0x6b, 0x7a, 0x68, 0xb1, 0xca, 0xf6, 0xd6, 0x8b, 0x68, 0x33,
	0x0d, 0x0b, 0x49, 0x36, 0xdd, 0x6c, 0x0e, 0x7e, 0x93, 0x7e, 0xdc, 0x92, 0x0d, 0xad, 0x51, 0xe8,
	0x6d, 0x78, 0xf3, 0xf8, 0xcd, 0xf0, 0x1e, 0xa0, 0xa6, 0x48, 0xe6, 0x46, 0x6f, 0x8d, 0x54, 0x29,
	0xcf, 0xb4, 0x32, 0x0a, 0xdd, 0xba, 0x36, 0xb8, 0x88, 0x94, 0x8a, 0x62, 0x9a, 0xd9, 0xdd, 0xae,
	0xf8, 0x98, 0x51, 0x92, 0x99, 0x7d, 0x65, 0x1d, 0x3f, 0x81, 0x2b, 0x6a, 0x66, 0x44, 0x68, 0xa6,
	0xdb, 0x84, 0x7c, 0x36, 0x64, 0x93, 0x8e, 0xb0, 0x33, 0x5e, 0x41, 0x33, 0x51, 0x21, 0xf9, 0xce,
	0x90, 0x4d, 0xbc, 0x39, 0xf2, 0xa3, 0x8b, 0x4b, 0x15, 0x92, 0xb0, 0xfb, 0x71, 0x01, 0x2d, 0x41,
	0x59, 0xbc, 0x47, 0x0f, 0x1c, 0x19, 0x5a, 0x84, 0x2b, 0x1c, 0x19, 0xe2, 0x2d, 0x74, 0x35, 0x99,
	0x42, 0xa7, 0x9b, 0xf7, 0x03, 0xc7, 0x3f, 0xe6, 0x08, 0x6b, 0x78, 0x28, 0x69, 0xa0, 0x7f, 0x67,
	0x1c, 0x81, 0x4b, 0x5a, 0x2b, 0xbd, 0x09, 0xc9, 0x6c, 0x65, 0xec, 0xff, 0xb3, 0x7f, 0x75, 0xad,
	0xb6, 0xb0, 0xd2, 0xf4, 0x12, 0x9a, 0xe5, 0x13, 0xd8, 0x81, 0xd6, 0xfa, 0x65, 0xb5, 0x08, 0x7a,
	0x0d, 0x04, 0x68, 0xaf, 0x03, 0x3b, 0xb3, 0xe9, 0x08, 0xe0, 0xc0, 0xc6, 0x36, 0x38, 0xab, 0xe7,
	0x5e, 0x03, 0xbb, 0xf0, 0x3f, 0x10, 0x62, 0x69, 0x2d, 0xf3, 0x2f, 0x06, 0x67, 0x55, 0x0a, 0xa4,
	0xf1, 0x11, 0xfa, 0xf5, 0x44, 0x04, 0x7d, 0x16, 0x94, 0x1b, 0x1c, 0x9c, 0xbe, 0x5b, 0x4b, 0xb8,
	0x7f, 0xba, 0x2b, 0x43, 0x58, 0x80, 0xb7, 0x54, 0xa9, 0x34, 0x4a, 0xbf, 0x52, 0x9e, 0x97, 0xd9,
	0x9e, 0xf3, 0xaa, 0x09, 0xfe, 0xd3, 0x04, 0x0f, 0xca, 0x26, 0x06, 0x7f, 0xe8, 0x13, 0x76, 0xcd,
	0xee, 0x7b, 0x6f, 0x1e, 0xbf, 0xab, 0xd3, 0x77, 0x6d, 0xeb, 0xba, 0xf9, 0x0e, 0x00, 0x00, 0xff,
	0xff, 0xa5, 0xc2, 0xa4, 0x6b, 0xf9, 0x01, 0x00, 0x00,
}
