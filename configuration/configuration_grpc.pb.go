// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package configuration

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ConfiguratorClient is the client API for Configurator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConfiguratorClient interface {
	ConfigurationRequest(ctx context.Context, in *Request, opts ...grpc.CallOption) (Configurator_ConfigurationRequestClient, error)
}

type configuratorClient struct {
	cc grpc.ClientConnInterface
}

func NewConfiguratorClient(cc grpc.ClientConnInterface) ConfiguratorClient {
	return &configuratorClient{cc}
}

func (c *configuratorClient) ConfigurationRequest(ctx context.Context, in *Request, opts ...grpc.CallOption) (Configurator_ConfigurationRequestClient, error) {
	stream, err := c.cc.NewStream(ctx, &Configurator_ServiceDesc.Streams[0], "/configuration.Configurator/ConfigurationRequest", opts...)
	if err != nil {
		return nil, err
	}
	x := &configuratorConfigurationRequestClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Configurator_ConfigurationRequestClient interface {
	Recv() (*Reply, error)
	grpc.ClientStream
}

type configuratorConfigurationRequestClient struct {
	grpc.ClientStream
}

func (x *configuratorConfigurationRequestClient) Recv() (*Reply, error) {
	m := new(Reply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ConfiguratorServer is the server API for Configurator service.
// All implementations must embed UnimplementedConfiguratorServer
// for forward compatibility
type ConfiguratorServer interface {
	ConfigurationRequest(*Request, Configurator_ConfigurationRequestServer) error
	mustEmbedUnimplementedConfiguratorServer()
}

// UnimplementedConfiguratorServer must be embedded to have forward compatible implementations.
type UnimplementedConfiguratorServer struct {
}

func (UnimplementedConfiguratorServer) ConfigurationRequest(*Request, Configurator_ConfigurationRequestServer) error {
	return status.Errorf(codes.Unimplemented, "method ConfigurationRequest not implemented")
}
func (UnimplementedConfiguratorServer) mustEmbedUnimplementedConfiguratorServer() {}

// UnsafeConfiguratorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConfiguratorServer will
// result in compilation errors.
type UnsafeConfiguratorServer interface {
	mustEmbedUnimplementedConfiguratorServer()
}

func RegisterConfiguratorServer(s grpc.ServiceRegistrar, srv ConfiguratorServer) {
	s.RegisterService(&Configurator_ServiceDesc, srv)
}

func _Configurator_ConfigurationRequest_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Request)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ConfiguratorServer).ConfigurationRequest(m, &configuratorConfigurationRequestServer{stream})
}

type Configurator_ConfigurationRequestServer interface {
	Send(*Reply) error
	grpc.ServerStream
}

type configuratorConfigurationRequestServer struct {
	grpc.ServerStream
}

func (x *configuratorConfigurationRequestServer) Send(m *Reply) error {
	return x.ServerStream.SendMsg(m)
}

// Configurator_ServiceDesc is the grpc.ServiceDesc for Configurator service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Configurator_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "configuration.Configurator",
	HandlerType: (*ConfiguratorServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ConfigurationRequest",
			Handler:       _Configurator_ConfigurationRequest_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "configuration.proto",
}
