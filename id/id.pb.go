// Code generated by protoc-gen-go. DO NOT EDIT.
// source: id.proto

package id

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ReturnCode int32

const (
	ReturnCode_OK        ReturnCode = 0
	ReturnCode_ERR_TYPE1 ReturnCode = 1
)

var ReturnCode_name = map[int32]string{
	0: "OK",
	1: "ERR_TYPE1",
}

var ReturnCode_value = map[string]int32{
	"OK":        0,
	"ERR_TYPE1": 1,
}

func (x ReturnCode) String() string {
	return proto.EnumName(ReturnCode_name, int32(x))
}

func (ReturnCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_4b3ad0c1fc883139, []int{0}
}

type IDFull struct {
	Request              *empty.Empty `protobuf:"bytes,1,opt,name=request,proto3" json:"request,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *IDFull) Reset()         { *m = IDFull{} }
func (m *IDFull) String() string { return proto.CompactTextString(m) }
func (*IDFull) ProtoMessage()    {}
func (*IDFull) Descriptor() ([]byte, []int) {
	return fileDescriptor_4b3ad0c1fc883139, []int{0}
}

func (m *IDFull) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IDFull.Unmarshal(m, b)
}
func (m *IDFull) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IDFull.Marshal(b, m, deterministic)
}
func (m *IDFull) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IDFull.Merge(m, src)
}
func (m *IDFull) XXX_Size() int {
	return xxx_messageInfo_IDFull.Size(m)
}
func (m *IDFull) XXX_DiscardUnknown() {
	xxx_messageInfo_IDFull.DiscardUnknown(m)
}

var xxx_messageInfo_IDFull proto.InternalMessageInfo

func (m *IDFull) GetRequest() *empty.Empty {
	if m != nil {
		return m.Request
	}
	return nil
}

type IDNode struct {
	NodeId               []byte   `protobuf:"bytes,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IDNode) Reset()         { *m = IDNode{} }
func (m *IDNode) String() string { return proto.CompactTextString(m) }
func (*IDNode) ProtoMessage()    {}
func (*IDNode) Descriptor() ([]byte, []int) {
	return fileDescriptor_4b3ad0c1fc883139, []int{1}
}

func (m *IDNode) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IDNode.Unmarshal(m, b)
}
func (m *IDNode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IDNode.Marshal(b, m, deterministic)
}
func (m *IDNode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IDNode.Merge(m, src)
}
func (m *IDNode) XXX_Size() int {
	return xxx_messageInfo_IDNode.Size(m)
}
func (m *IDNode) XXX_DiscardUnknown() {
	xxx_messageInfo_IDNode.DiscardUnknown(m)
}

var xxx_messageInfo_IDNode proto.InternalMessageInfo

func (m *IDNode) GetNodeId() []byte {
	if m != nil {
		return m.NodeId
	}
	return nil
}

type Reply struct {
	ReturnCode           ReturnCode `protobuf:"varint,1,opt,name=return_code,json=returnCode,proto3,enum=id.ReturnCode" json:"return_code,omitempty"`
	ErrorDetail          string     `protobuf:"bytes,2,opt,name=error_detail,json=errorDetail,proto3" json:"error_detail,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *Reply) Reset()         { *m = Reply{} }
func (m *Reply) String() string { return proto.CompactTextString(m) }
func (*Reply) ProtoMessage()    {}
func (*Reply) Descriptor() ([]byte, []int) {
	return fileDescriptor_4b3ad0c1fc883139, []int{2}
}

func (m *Reply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Reply.Unmarshal(m, b)
}
func (m *Reply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Reply.Marshal(b, m, deterministic)
}
func (m *Reply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Reply.Merge(m, src)
}
func (m *Reply) XXX_Size() int {
	return xxx_messageInfo_Reply.Size(m)
}
func (m *Reply) XXX_DiscardUnknown() {
	xxx_messageInfo_Reply.DiscardUnknown(m)
}

var xxx_messageInfo_Reply proto.InternalMessageInfo

func (m *Reply) GetReturnCode() ReturnCode {
	if m != nil {
		return m.ReturnCode
	}
	return ReturnCode_OK
}

func (m *Reply) GetErrorDetail() string {
	if m != nil {
		return m.ErrorDetail
	}
	return ""
}

func init() {
	proto.RegisterEnum("id.ReturnCode", ReturnCode_name, ReturnCode_value)
	proto.RegisterType((*IDFull)(nil), "id.IDFull")
	proto.RegisterType((*IDNode)(nil), "id.IDNode")
	proto.RegisterType((*Reply)(nil), "id.Reply")
}

func init() { proto.RegisterFile("id.proto", fileDescriptor_4b3ad0c1fc883139) }

var fileDescriptor_4b3ad0c1fc883139 = []byte{
	// 270 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x90, 0x41, 0x4b, 0xc3, 0x30,
	0x14, 0x80, 0x6d, 0xd1, 0xce, 0xbe, 0x6e, 0x63, 0xe4, 0xa0, 0x63, 0x5e, 0xb6, 0x0a, 0x32, 0x3c,
	0xa4, 0x5a, 0x6f, 0x7a, 0xd3, 0x56, 0x28, 0x82, 0x4a, 0xd8, 0x45, 0x3d, 0x14, 0xe7, 0x7b, 0x8e,
	0x40, 0x5d, 0x6a, 0x4c, 0x0f, 0xfb, 0xf7, 0x92, 0x84, 0xa9, 0x78, 0x4b, 0x3e, 0xbe, 0x8f, 0xbc,
	0x17, 0xd8, 0x97, 0xc8, 0x5b, 0xad, 0x8c, 0x62, 0xa1, 0xc4, 0xc9, 0xd1, 0x4a, 0xa9, 0x55, 0x43,
	0x99, 0x23, 0xcb, 0xee, 0x3d, 0xa3, 0x8f, 0xd6, 0x6c, 0xbc, 0x90, 0x5e, 0x42, 0x54, 0x15, 0xb7,
	0x5d, 0xd3, 0xb0, 0x33, 0xe8, 0x69, 0xfa, 0xec, 0xe8, 0xcb, 0x8c, 0x83, 0x69, 0x30, 0x4f, 0xf2,
	0x03, 0xee, 0x43, 0xbe, 0x0d, 0x79, 0x69, 0x43, 0xb1, 0xd5, 0xd2, 0x99, 0x6d, 0xef, 0x15, 0x12,
	0x3b, 0x84, 0xde, 0x5a, 0x21, 0xd5, 0x12, 0x5d, 0xdb, 0x17, 0x91, 0xbd, 0x56, 0x98, 0xbe, 0xc0,
	0x9e, 0xa0, 0xb6, 0xd9, 0xb0, 0x0c, 0x12, 0x4d, 0xa6, 0xd3, 0xeb, 0xfa, 0x4d, 0x21, 0x39, 0x6b,
	0x98, 0x0f, 0xb9, 0x44, 0x2e, 0x1c, 0xbe, 0x51, 0x48, 0x02, 0xf4, 0xcf, 0x99, 0xcd, 0xa0, 0x4f,
	0x5a, 0x2b, 0x5d, 0x23, 0x99, 0x57, 0xd9, 0x8c, 0xc3, 0x69, 0x30, 0x8f, 0x45, 0xe2, 0x58, 0xe1,
	0xd0, 0xe9, 0x31, 0xc0, 0x6f, 0xcc, 0x22, 0x08, 0x1f, 0xee, 0x46, 0x3b, 0x6c, 0x00, 0x71, 0x29,
	0x44, 0xbd, 0x78, 0x7a, 0x2c, 0xcf, 0x47, 0x41, 0xbe, 0x80, 0xb0, 0x2a, 0xd8, 0x09, 0x0c, 0xfc,
	0x9a, 0xc2, 0xcf, 0xce, 0xc0, 0x3e, 0xed, 0xd1, 0x24, 0xf6, 0x63, 0xd8, 0x31, 0x9d, 0x67, 0x57,
	0xfa, 0xe7, 0x59, 0xf4, 0xc7, 0xbb, 0x8e, 0x9e, 0x77, 0xf9, 0x95, 0xc4, 0x65, 0xe4, 0xfe, 0xe6,
	0xe2, 0x3b, 0x00, 0x00, 0xff, 0xff, 0xd1, 0x4a, 0xbb, 0x53, 0x72, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// IDClient is the client API for ID service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type IDClient interface {
	IDFullRequest(ctx context.Context, in *IDFull, opts ...grpc.CallOption) (*Reply, error)
	IDNodeRequest(ctx context.Context, in *IDNode, opts ...grpc.CallOption) (*Reply, error)
}

type iDClient struct {
	cc *grpc.ClientConn
}

func NewIDClient(cc *grpc.ClientConn) IDClient {
	return &iDClient{cc}
}

func (c *iDClient) IDFullRequest(ctx context.Context, in *IDFull, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, "/id.ID/IDFullRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iDClient) IDNodeRequest(ctx context.Context, in *IDNode, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, "/id.ID/IDNodeRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IDServer is the server API for ID service.
type IDServer interface {
	IDFullRequest(context.Context, *IDFull) (*Reply, error)
	IDNodeRequest(context.Context, *IDNode) (*Reply, error)
}

// UnimplementedIDServer can be embedded to have forward compatible implementations.
type UnimplementedIDServer struct {
}

func (*UnimplementedIDServer) IDFullRequest(ctx context.Context, req *IDFull) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IDFullRequest not implemented")
}
func (*UnimplementedIDServer) IDNodeRequest(ctx context.Context, req *IDNode) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IDNodeRequest not implemented")
}

func RegisterIDServer(s *grpc.Server, srv IDServer) {
	s.RegisterService(&_ID_serviceDesc, srv)
}

func _ID_IDFullRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDFull)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IDServer).IDFullRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/id.ID/IDFullRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IDServer).IDFullRequest(ctx, req.(*IDFull))
	}
	return interceptor(ctx, in, info, handler)
}

func _ID_IDNodeRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDNode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IDServer).IDNodeRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/id.ID/IDNodeRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IDServer).IDNodeRequest(ctx, req.(*IDNode))
	}
	return interceptor(ctx, in, info, handler)
}

var _ID_serviceDesc = grpc.ServiceDesc{
	ServiceName: "id.ID",
	HandlerType: (*IDServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IDFullRequest",
			Handler:    _ID_IDFullRequest_Handler,
		},
		{
			MethodName: "IDNodeRequest",
			Handler:    _ID_IDNodeRequest_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "id.proto",
}
