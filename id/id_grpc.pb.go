// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: id.proto

package id

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// IDClient is the client API for ID service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IDClient interface {
	IDFullRequest(ctx context.Context, in *IDFull, opts ...grpc.CallOption) (*Reply, error)
	IDNodeRequest(ctx context.Context, in *IDNode, opts ...grpc.CallOption) (*Reply, error)
}

type iDClient struct {
	cc grpc.ClientConnInterface
}

func NewIDClient(cc grpc.ClientConnInterface) IDClient {
	return &iDClient{cc}
}

func (c *iDClient) IDFullRequest(ctx context.Context, in *IDFull, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, "/id.ID/IDFullRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iDClient) IDNodeRequest(ctx context.Context, in *IDNode, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, "/id.ID/IDNodeRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IDServer is the server API for ID service.
// All implementations must embed UnimplementedIDServer
// for forward compatibility
type IDServer interface {
	IDFullRequest(context.Context, *IDFull) (*Reply, error)
	IDNodeRequest(context.Context, *IDNode) (*Reply, error)
	mustEmbedUnimplementedIDServer()
}

// UnimplementedIDServer must be embedded to have forward compatible implementations.
type UnimplementedIDServer struct {
}

func (UnimplementedIDServer) IDFullRequest(context.Context, *IDFull) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IDFullRequest not implemented")
}
func (UnimplementedIDServer) IDNodeRequest(context.Context, *IDNode) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IDNodeRequest not implemented")
}
func (UnimplementedIDServer) mustEmbedUnimplementedIDServer() {}

// UnsafeIDServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IDServer will
// result in compilation errors.
type UnsafeIDServer interface {
	mustEmbedUnimplementedIDServer()
}

func RegisterIDServer(s grpc.ServiceRegistrar, srv IDServer) {
	s.RegisterService(&ID_ServiceDesc, srv)
}

func _ID_IDFullRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDFull)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IDServer).IDFullRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/id.ID/IDFullRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IDServer).IDFullRequest(ctx, req.(*IDFull))
	}
	return interceptor(ctx, in, info, handler)
}

func _ID_IDNodeRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDNode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IDServer).IDNodeRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/id.ID/IDNodeRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IDServer).IDNodeRequest(ctx, req.(*IDNode))
	}
	return interceptor(ctx, in, info, handler)
}

// ID_ServiceDesc is the grpc.ServiceDesc for ID service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ID_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "id.ID",
	HandlerType: (*IDServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IDFullRequest",
			Handler:    _ID_IDFullRequest_Handler,
		},
		{
			MethodName: "IDNodeRequest",
			Handler:    _ID_IDNodeRequest_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "id.proto",
}
